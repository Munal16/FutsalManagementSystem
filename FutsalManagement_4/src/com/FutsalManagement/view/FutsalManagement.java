package com.FutsalManagement.view;
// Importing
import com.FutsalManagement.controller.algorithms.BinarySearch;
import com.FutsalManagement.controller.algorithms.InsertionSort;
import com.FutsalManagement.controller.algorithms.MergeSort;
import com.FutsalManagement.controller.algorithms.SelectionSort;
import com.FutsalManagement.model.BookingModel;
import com.FutsalManagement.util.Validationutil;
import java.awt.Color;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Munal Lmu Id = 23048582
 */
public class FutsalManagement extends javax.swing.JFrame {

    private List<BookingModel> BookingList;
    private java.awt.CardLayout cardLayout;
    private final Validationutil Validationutil;
    private final Color errorColor = new Color(255, 51, 0);
    private final Color yellowColor = new Color(239, 192, 32);

    /**
     * Creates new form FutsalManagement
     */
    public FutsalManagement() {
        initComponents();
        Validationutil = new Validationutil();
        initializeLayout(); // Set up CardLayout and add screens
        initializeData(); // Initialize booking data and table
        startProgress(); // Show loading screen and initiate progress
        btnlogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
                btnlogout.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        btnLogoutActionPerformed(evt);
                    }
                });

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnllogin = new javax.swing.JPanel();
        lblloginlogo = new javax.swing.JLabel();
        lblsignin = new javax.swing.JLabel();
        txtfldusername = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        fwfldpassword = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        lbllogin1 = new javax.swing.JLabel();
        btnlogin = new javax.swing.JButton();
        lblloginslogan = new javax.swing.JLabel();
        lblLoginError = new javax.swing.JLabel();
        pnlmain1 = new javax.swing.JPanel();
        pnlmainupper = new javax.swing.JPanel();
        lblmainlogo = new javax.swing.JLabel();
        lblmainslogan1 = new javax.swing.JLabel();
        lblmainslogan = new javax.swing.JLabel();
        lblmainslogan3 = new javax.swing.JLabel();
        lblmainslogan2 = new javax.swing.JLabel();
        btnlogout = new javax.swing.JButton();
        maintabbedpane = new javax.swing.JTabbedPane();
        pnlmainhome = new javax.swing.JPanel();
        lblhomelogo = new javax.swing.JLabel();
        lblmaintitle = new javax.swing.JLabel();
        lblhome1 = new javax.swing.JLabel();
        lblhome2 = new javax.swing.JLabel();
        btnhometobooking = new javax.swing.JButton();
        lblhome3 = new javax.swing.JLabel();
        lblhome4 = new javax.swing.JLabel();
        pnlmaingallery = new javax.swing.JPanel();
        lblgallerylogo = new javax.swing.JLabel();
        lblgallery1 = new javax.swing.JLabel();
        lblgallerybandit = new javax.swing.JLabel();
        lblgalleryyalla = new javax.swing.JLabel();
        lblgalleryimadol = new javax.swing.JLabel();
        lblgallery2 = new javax.swing.JLabel();
        lblgallery3 = new javax.swing.JLabel();
        lblgallery4 = new javax.swing.JLabel();
        lblgallery5 = new javax.swing.JLabel();
        pnlmainaboutus = new javax.swing.JPanel();
        lblaboutuslogo = new javax.swing.JLabel();
        lblaboutus1 = new javax.swing.JLabel();
        lblaboutus3 = new javax.swing.JLabel();
        lblaboutus4 = new javax.swing.JLabel();
        lblaboutus5 = new javax.swing.JLabel();
        pnlmainbooking = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblbooking = new javax.swing.JTable();
        txtfldbookingdate = new javax.swing.JTextField();
        txtfldbookingid = new javax.swing.JTextField();
        txtfldlocation = new javax.swing.JTextField();
        txtfldfullname = new javax.swing.JTextField();
        txtfldcontact = new javax.swing.JTextField();
        txtfldtotalcost = new javax.swing.JTextField();
        lblErrorMsgBookingDate = new javax.swing.JLabel();
        lblErrorMsgBookingId = new javax.swing.JLabel();
        lblErrorMsgLocation = new javax.swing.JLabel();
        lblErrorMsgFullName = new javax.swing.JLabel();
        lblErrorMsgContact = new javax.swing.JLabel();
        lblErrorMsgTotalCost = new javax.swing.JLabel();
        btnadd = new javax.swing.JButton();
        btnupdate = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnclear = new javax.swing.JButton();
        btnselectionsort = new javax.swing.JButton();
        btnmergesort = new javax.swing.JButton();
        InsertionSort = new javax.swing.JButton();
        binarysearch = new javax.swing.JTextField();
        pnlloading = new javax.swing.JPanel();
        lblloadinglogo = new javax.swing.JLabel();
        lblloadingname = new javax.swing.JLabel();
        lblsuii = new javax.swing.JLabel();
        pgbarloading = new javax.swing.JProgressBar();
        lblloading1 = new javax.swing.JLabel();

        pnllogin.setBackground(new java.awt.Color(10, 54, 120));
        pnllogin.setForeground(new java.awt.Color(48, 50, 52));

        lblloginlogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/FutsalManagement/resoures/backgroundL.png"))); // NOI18N

        lblsignin.setBackground(new java.awt.Color(48, 50, 52));
        lblsignin.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblsignin.setForeground(new java.awt.Color(211, 211, 211));
        lblsignin.setText("SIGN IN");

        txtfldusername.setBackground(new java.awt.Color(48, 50, 52));
        txtfldusername.setForeground(new java.awt.Color(211, 211, 211));
        txtfldusername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldusernameActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(48, 50, 52));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(211, 211, 211));
        jLabel1.setText("Username");

        fwfldpassword.setBackground(new java.awt.Color(48, 50, 52));
        fwfldpassword.setForeground(new java.awt.Color(211, 211, 211));
        fwfldpassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fwfldpasswordActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(48, 50, 52));
        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(211, 211, 211));
        jLabel2.setText("Password");

        lbllogin1.setBackground(new java.awt.Color(48, 50, 52));
        lbllogin1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lbllogin1.setForeground(new java.awt.Color(211, 211, 211));
        lbllogin1.setText("Please Enter Your Login Details");

        btnlogin.setBackground(new java.awt.Color(48, 50, 52));
        btnlogin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnlogin.setForeground(new java.awt.Color(211, 211, 211));
        btnlogin.setText("Login");

        lblloginslogan.setBackground(new java.awt.Color(48, 50, 52));
        lblloginslogan.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblloginslogan.setForeground(new java.awt.Color(211, 211, 211));
        lblloginslogan.setText("VICTORY IS THE KEY DETERMINATION GETS YOU THERE");

        lblLoginError.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblLoginError.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout pnlloginLayout = new javax.swing.GroupLayout(pnllogin);
        pnllogin.setLayout(pnlloginLayout);
        pnlloginLayout.setHorizontalGroup(
            pnlloginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlloginLayout.createSequentialGroup()
                .addGroup(pnlloginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblloginlogo)
                    .addGroup(pnlloginLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(lblloginslogan)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addGroup(pnlloginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlloginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlloginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlloginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlloginLayout.createSequentialGroup()
                                    .addComponent(lblsignin)
                                    .addGap(211, 211, 211))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlloginLayout.createSequentialGroup()
                                    .addComponent(lbllogin1)
                                    .addGap(69, 69, 69)))
                            .addComponent(jLabel1)
                            .addComponent(txtfldusername, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(lblLoginError, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(fwfldpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlloginLayout.createSequentialGroup()
                        .addComponent(btnlogin, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137))))
        );
        pnlloginLayout.setVerticalGroup(
            pnlloginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlloginLayout.createSequentialGroup()
                .addComponent(lblloginlogo)
                .addGap(18, 18, 18)
                .addComponent(lblloginslogan)
                .addGap(0, 96, Short.MAX_VALUE))
            .addGroup(pnlloginLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblsignin)
                .addGap(31, 31, 31)
                .addComponent(lbllogin1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblLoginError, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtfldusername, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(fwfldpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btnlogin, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlmain1.setBackground(new java.awt.Color(10, 54, 120));

        pnlmainupper.setBackground(new java.awt.Color(48, 50, 52));

        lblmainlogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/FutsalManagement/resoures/logo.png"))); // NOI18N

        lblmainslogan1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblmainslogan1.setForeground(new java.awt.Color(204, 204, 204));
        lblmainslogan1.setText("SLEEP");

        lblmainslogan.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblmainslogan.setForeground(new java.awt.Color(204, 204, 204));
        lblmainslogan.setText("EAT");

        lblmainslogan3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblmainslogan3.setForeground(new java.awt.Color(204, 204, 204));
        lblmainslogan3.setText("REPEAT");

        lblmainslogan2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblmainslogan2.setForeground(new java.awt.Color(204, 204, 204));
        lblmainslogan2.setText("FOOTBALL");

        btnlogout.setBackground(new java.awt.Color(48, 50, 52));
        btnlogout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnlogout.setForeground(new java.awt.Color(211, 211, 211));
        btnlogout.setText("LOGOUT");

        javax.swing.GroupLayout pnlmainupperLayout = new javax.swing.GroupLayout(pnlmainupper);
        pnlmainupper.setLayout(pnlmainupperLayout);
        pnlmainupperLayout.setHorizontalGroup(
            pnlmainupperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlmainupperLayout.createSequentialGroup()
                .addGroup(pnlmainupperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlmainupperLayout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(lblmainslogan))
                    .addGroup(pnlmainupperLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblmainlogo)
                        .addGap(6, 6, 6)
                        .addGroup(pnlmainupperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlmainupperLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(lblmainslogan3))
                            .addGroup(pnlmainupperLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(lblmainslogan1))
                            .addComponent(lblmainslogan2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnlogout, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(200, 200, 200))
        );
        pnlmainupperLayout.setVerticalGroup(
            pnlmainupperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlmainupperLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lblmainslogan)
                .addGap(2, 2, 2)
                .addComponent(lblmainlogo, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlmainupperLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnlmainupperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlmainupperLayout.createSequentialGroup()
                        .addComponent(lblmainslogan1)
                        .addGap(4, 4, 4)
                        .addComponent(lblmainslogan2))
                    .addComponent(btnlogout, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(lblmainslogan3))
        );

        maintabbedpane.setBackground(new java.awt.Color(48, 50, 52));
        maintabbedpane.setForeground(new java.awt.Color(255, 255, 255));

        pnlmainhome.setBackground(new java.awt.Color(10, 54, 120));
        pnlmainhome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblhomelogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/FutsalManagement/resoures/Kick.png"))); // NOI18N
        lblhomelogo.setText("jLabel3");
        pnlmainhome.add(lblhomelogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 109, 506, 239));

        lblmaintitle.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblmaintitle.setForeground(new java.awt.Color(211, 211, 211));
        lblmaintitle.setText("WELCOME TO FUTSAL MANAGEMENT SYSTEM");
        pnlmainhome.add(lblmaintitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, -1, -1));

        lblhome1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblhome1.setForeground(new java.awt.Color(211, 211, 211));
        lblhome1.setText("PLAY TO WIN");
        pnlmainhome.add(lblhome1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 360, -1, -1));

        lblhome2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblhome2.setForeground(new java.awt.Color(211, 211, 211));
        lblhome2.setText("Book Your Next Futsal Game In Few Clicks");
        pnlmainhome.add(lblhome2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 260, -1, -1));

        btnhometobooking.setBackground(new java.awt.Color(48, 50, 52));
        btnhometobooking.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnhometobooking.setForeground(new java.awt.Color(211, 211, 211));
        btnhometobooking.setText("Book Now");
        btnhometobooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhometobookingActionPerformed(evt);
            }
        });
        pnlmainhome.add(btnhometobooking, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 300, -1, -1));

        lblhome3.setBackground(new java.awt.Color(48, 50, 52));
        lblhome3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblhome3.setForeground(new java.awt.Color(211, 211, 211));
        lblhome3.setText("The solution for booking and managing futsal matches!");
        pnlmainhome.add(lblhome3, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 140, -1, -1));

        lblhome4.setBackground(new java.awt.Color(48, 50, 52));
        lblhome4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblhome4.setForeground(new java.awt.Color(211, 211, 211));
        lblhome4.setText("Play  Compete  Conquer");
        pnlmainhome.add(lblhome4, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 200, -1, -1));

        maintabbedpane.addTab("Home", pnlmainhome);

        pnlmaingallery.setBackground(new java.awt.Color(10, 54, 120));
        pnlmaingallery.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblgallerylogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/FutsalManagement/resoures/futsal4.png"))); // NOI18N
        pnlmaingallery.add(lblgallerylogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, -1, -1));

        lblgallery1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/FutsalManagement/resoures/futsal1.png"))); // NOI18N
        pnlmaingallery.add(lblgallery1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, -1, -1));

        lblgallerybandit.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblgallerybandit.setForeground(new java.awt.Color(211, 211, 211));
        lblgallerybandit.setText("Bandit Court");
        pnlmaingallery.add(lblgallerybandit, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 440, -1, -1));

        lblgalleryyalla.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblgalleryyalla.setForeground(new java.awt.Color(211, 211, 211));
        lblgalleryyalla.setText("Yalla Futsal");
        pnlmaingallery.add(lblgalleryyalla, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 440, -1, -1));

        lblgalleryimadol.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblgalleryimadol.setForeground(new java.awt.Color(211, 211, 211));
        lblgalleryimadol.setText("Imadol Futsal");
        pnlmaingallery.add(lblgalleryimadol, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 440, -1, -1));

        lblgallery2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/FutsalManagement/resoures/futsal2.png"))); // NOI18N
        pnlmaingallery.add(lblgallery2, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 250, -1, 183));

        lblgallery3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/FutsalManagement/resoures/futsal3.png"))); // NOI18N
        pnlmaingallery.add(lblgallery3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 290, -1, -1));

        lblgallery4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblgallery4.setForeground(new java.awt.Color(211, 211, 211));
        lblgallery4.setText("PLAY TO WIN");
        pnlmaingallery.add(lblgallery4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 220, -1, -1));

        lblgallery5.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblgallery5.setForeground(new java.awt.Color(211, 211, 211));
        lblgallery5.setText("Some of our futsal courts");
        pnlmaingallery.add(lblgallery5, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 0, -1, -1));

        maintabbedpane.addTab("Gallery", pnlmaingallery);

        pnlmainaboutus.setBackground(new java.awt.Color(10, 54, 120));

        lblaboutuslogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/FutsalManagement/resoures/ground.png"))); // NOI18N

        lblaboutus1.setBackground(new java.awt.Color(48, 50, 52));
        lblaboutus1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblaboutus1.setForeground(new java.awt.Color(211, 211, 211));
        lblaboutus1.setText("Welcome to Futsal Management Sytem");

        lblaboutus3.setBackground(new java.awt.Color(48, 50, 52));
        lblaboutus3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblaboutus3.setForeground(new java.awt.Color(211, 211, 211));
        lblaboutus3.setText("<html>Simple booking features to secure your preferred courts <br> A collection of the best futsal locations <br> real-time availability and booking changes. ");

        lblaboutus4.setBackground(new java.awt.Color(48, 50, 52));
        lblaboutus4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblaboutus4.setForeground(new java.awt.Color(211, 211, 211));
        lblaboutus4.setText("<html> Our goal is to make scheduling and managing futsal matches easier and better<br> Our platform, which was created with futsal players, teams, and organizers in mind,<br> makes sure passion for the game never dies.");

        lblaboutus5.setBackground(new java.awt.Color(48, 50, 52));
        lblaboutus5.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblaboutus5.setForeground(new java.awt.Color(211, 211, 211));
        lblaboutus5.setText("Play To Win");

        javax.swing.GroupLayout pnlmainaboutusLayout = new javax.swing.GroupLayout(pnlmainaboutus);
        pnlmainaboutus.setLayout(pnlmainaboutusLayout);
        pnlmainaboutusLayout.setHorizontalGroup(
            pnlmainaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlmainaboutusLayout.createSequentialGroup()
                .addComponent(lblaboutuslogo, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlmainaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlmainaboutusLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblaboutus4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlmainaboutusLayout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(lblaboutus1))
                    .addGroup(pnlmainaboutusLayout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addGroup(pnlmainaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblaboutus5)
                            .addComponent(lblaboutus3, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(318, Short.MAX_VALUE))
        );
        pnlmainaboutusLayout.setVerticalGroup(
            pnlmainaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlmainaboutusLayout.createSequentialGroup()
                .addGroup(pnlmainaboutusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblaboutuslogo, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlmainaboutusLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(lblaboutus1)
                        .addGap(36, 36, 36)
                        .addComponent(lblaboutus4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblaboutus3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(lblaboutus5)))
                .addContainerGap(440, Short.MAX_VALUE))
        );

        maintabbedpane.addTab("AboutUs", pnlmainaboutus);

        pnlmainbooking.setBackground(new java.awt.Color(10, 54, 120));

        tblbooking.setBackground(new java.awt.Color(48, 50, 52));
        tblbooking.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tblbooking.setForeground(new java.awt.Color(211, 211, 211));
        tblbooking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "BookingDate", "BookingId", "Location", "FullName", "contact", "TotalCost"
            }
        ));
        jScrollPane1.setViewportView(tblbooking);

        txtfldbookingdate.setBackground(new java.awt.Color(48, 50, 52));
        txtfldbookingdate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtfldbookingdate.setForeground(new java.awt.Color(211, 211, 211));
        txtfldbookingdate.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Booking Date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N

        txtfldbookingid.setBackground(new java.awt.Color(48, 50, 52));
        txtfldbookingid.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtfldbookingid.setForeground(new java.awt.Color(211, 211, 211));
        txtfldbookingid.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Booking Id", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        txtfldbookingid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldbookingidActionPerformed(evt);
            }
        });

        txtfldlocation.setBackground(new java.awt.Color(48, 50, 52));
        txtfldlocation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtfldlocation.setForeground(new java.awt.Color(211, 211, 211));
        txtfldlocation.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Location", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        txtfldlocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldlocationActionPerformed(evt);
            }
        });

        txtfldfullname.setBackground(new java.awt.Color(48, 50, 52));
        txtfldfullname.setForeground(new java.awt.Color(211, 211, 211));
        txtfldfullname.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Full Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        txtfldfullname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldfullnameActionPerformed(evt);
            }
        });

        txtfldcontact.setBackground(new java.awt.Color(48, 50, 52));
        txtfldcontact.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtfldcontact.setForeground(new java.awt.Color(211, 211, 211));
        txtfldcontact.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Contact", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        txtfldcontact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldcontactActionPerformed(evt);
            }
        });

        txtfldtotalcost.setBackground(new java.awt.Color(48, 50, 52));
        txtfldtotalcost.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtfldtotalcost.setForeground(new java.awt.Color(211, 211, 211));
        txtfldtotalcost.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Total Cost", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N

        lblErrorMsgBookingDate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblErrorMsgBookingDate.setForeground(new java.awt.Color(255, 51, 51));

        lblErrorMsgBookingId.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblErrorMsgBookingId.setForeground(new java.awt.Color(255, 51, 51));

        lblErrorMsgLocation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblErrorMsgLocation.setForeground(new java.awt.Color(255, 51, 51));

        lblErrorMsgFullName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblErrorMsgFullName.setForeground(new java.awt.Color(255, 51, 51));

        lblErrorMsgContact.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblErrorMsgContact.setForeground(new java.awt.Color(255, 51, 51));

        lblErrorMsgTotalCost.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblErrorMsgTotalCost.setForeground(new java.awt.Color(255, 51, 51));

        btnadd.setBackground(new java.awt.Color(48, 50, 52));
        btnadd.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnadd.setForeground(new java.awt.Color(211, 211, 211));
        btnadd.setText("ADD");
        btnadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddActionPerformed(evt);
            }
        });

        btnupdate.setBackground(new java.awt.Color(48, 50, 52));
        btnupdate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnupdate.setForeground(new java.awt.Color(211, 211, 211));
        btnupdate.setText("UPDATE");
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });

        btndelete.setBackground(new java.awt.Color(48, 50, 52));
        btndelete.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btndelete.setForeground(new java.awt.Color(211, 211, 211));
        btndelete.setText("DELETE");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        btnclear.setBackground(new java.awt.Color(48, 50, 52));
        btnclear.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnclear.setForeground(new java.awt.Color(211, 211, 211));
        btnclear.setText("CLEAR");
        btnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearActionPerformed(evt);
            }
        });

        btnselectionsort.setText("Sort By BookingId");
        btnselectionsort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnselectionsortActionPerformed(evt);
            }
        });

        btnmergesort.setText("Sort By Name");
        btnmergesort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmergesortActionPerformed(evt);
            }
        });

        InsertionSort.setText("Sort By Location");
        InsertionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertionSortActionPerformed(evt);
            }
        });

        binarysearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binarysearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlmainbookingLayout = new javax.swing.GroupLayout(pnlmainbooking);
        pnlmainbooking.setLayout(pnlmainbookingLayout);
        pnlmainbookingLayout.setHorizontalGroup(
            pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlmainbookingLayout.createSequentialGroup()
                .addGap(335, 335, 335)
                .addComponent(btnadd, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(btnupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97)
                .addComponent(btndelete, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98)
                .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlmainbookingLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblErrorMsgBookingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtfldbookingdate, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addGap(65, 65, 65)
                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblErrorMsgBookingId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtfldbookingid, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addGap(61, 61, 61)
                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblErrorMsgLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtfldlocation, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addGap(66, 66, 66)
                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblErrorMsgFullName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtfldfullname, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 410, Short.MAX_VALUE)
                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblErrorMsgContact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtfldcontact, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addGap(68, 68, 68)
                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblErrorMsgTotalCost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtfldtotalcost, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addGap(72, 72, 72))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlmainbookingLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlmainbookingLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(315, 315, 315))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlmainbookingLayout.createSequentialGroup()
                        .addComponent(binarysearch, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(btnselectionsort)
                        .addGap(18, 18, 18)
                        .addComponent(btnmergesort)
                        .addGap(35, 35, 35)
                        .addComponent(InsertionSort)
                        .addGap(211, 211, 211))))
        );
        pnlmainbookingLayout.setVerticalGroup(
            pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlmainbookingLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnselectionsort)
                    .addComponent(btnmergesort)
                    .addComponent(InsertionSort)
                    .addComponent(binarysearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89)
                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlmainbookingLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfldcontact)
                            .addComponent(txtfldtotalcost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtfldbookingdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtfldbookingid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtfldlocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtfldfullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorMsgBookingId)
                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlmainbookingLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblErrorMsgBookingDate)
                            .addGroup(pnlmainbookingLayout.createSequentialGroup()
                                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblErrorMsgLocation)
                                    .addComponent(lblErrorMsgFullName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblErrorMsgTotalCost)
                                    .addComponent(lblErrorMsgContact)))))
                    .addGroup(pnlmainbookingLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(pnlmainbookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btndelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnadd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(487, Short.MAX_VALUE))
        );

        maintabbedpane.addTab("Booking", pnlmainbooking);

        javax.swing.GroupLayout pnlmain1Layout = new javax.swing.GroupLayout(pnlmain1);
        pnlmain1.setLayout(pnlmain1Layout);
        pnlmain1Layout.setHorizontalGroup(
            pnlmain1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlmainupper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlmain1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maintabbedpane))
        );
        pnlmain1Layout.setVerticalGroup(
            pnlmain1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlmain1Layout.createSequentialGroup()
                .addComponent(pnlmainupper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maintabbedpane))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlloading.setBackground(new java.awt.Color(10, 54, 120));
        pnlloading.setForeground(new java.awt.Color(211, 211, 211));

        lblloadinglogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/FutsalManagement/resoures/logo.png"))); // NOI18N

        lblloadingname.setFont(new java.awt.Font("Arial", 1, 30)); // NOI18N
        lblloadingname.setText("Futsal Management System");

        lblsuii.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/FutsalManagement/resoures/sui-unscreen.gif"))); // NOI18N

        pgbarloading.setBackground(new java.awt.Color(48, 50, 52));
        pgbarloading.setForeground(new java.awt.Color(211, 211, 211));

        lblloading1.setBackground(new java.awt.Color(48, 50, 52));
        lblloading1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblloading1.setForeground(new java.awt.Color(211, 211, 211));
        lblloading1.setText("loading.....");

        javax.swing.GroupLayout pnlloadingLayout = new javax.swing.GroupLayout(pnlloading);
        pnlloading.setLayout(pnlloadingLayout);
        pnlloadingLayout.setHorizontalGroup(
            pnlloadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlloadingLayout.createSequentialGroup()
                .addGap(449, 449, 449)
                .addComponent(lblloadinglogo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlloadingLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlloadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlloadingLayout.createSequentialGroup()
                        .addComponent(lblloadingname)
                        .addGap(337, 337, 337))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlloadingLayout.createSequentialGroup()
                        .addGroup(pnlloadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pgbarloading, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblloading1))
                        .addGap(378, 378, 378))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlloadingLayout.createSequentialGroup()
                .addContainerGap(369, Short.MAX_VALUE)
                .addComponent(lblsuii, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(316, 316, 316))
        );
        pnlloadingLayout.setVerticalGroup(
            pnlloadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlloadingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblloadinglogo, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblloadingname)
                .addGap(18, 18, 18)
                .addComponent(lblsuii, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(pgbarloading, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblloading1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(pnlloading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlloading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnhometobookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhometobookingActionPerformed
        // TODO add your handling code here:
        // 1. Switch to the Booking Screen (Booking Tab)
        maintabbedpane.setSelectedComponent(pnlmainbooking);

    }//GEN-LAST:event_btnhometobookingActionPerformed

    private void txtfldcontactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldcontactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfldcontactActionPerformed

    private void txtfldbookingidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldbookingidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfldbookingidActionPerformed

    private void txtfldlocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldlocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfldlocationActionPerformed

    private void txtfldfullnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldfullnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfldfullnameActionPerformed

    private void txtfldusernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldusernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfldusernameActionPerformed

    private void fwfldpasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fwfldpasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fwfldpasswordActionPerformed

    /**
     * Initializes the layout of the application by setting up the CardLayout
     * and adding panels for different screens. Each panel is uniquely
     * identified for easy navigation between screens.
     */
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(pnlloading, "LoadingScreen");
        getContentPane().add(pnllogin, "LoginScreen");
        getContentPane().add(pnlmain1, "MainScreen");

        // Start with the loading screen
        loadScreen("LoadingScreen");
    }

    /**
     * Initializes the application's data, including the Booking list and table.
     * Populates the Booking list with sample data for demonstration purposes.
     */
    private void initializeData() {
        BookingList = new LinkedList<>();

        // Registering sample Bookings
        registerBooking(new BookingModel("2024-05-09", "230487", "Lalitpur", "Bimarsha", "9848791255", "3000"));
        registerBooking(new BookingModel("2024-02-12", "239846", "Imadol", "Ronik", "9818928272", "1500"));
        registerBooking(new BookingModel("2025-01-01", "837583", "Kathmandu", "Snehal", "9848849126", "2500"));
        registerBooking(new BookingModel("2024-04-12", "996573", "Bhaktapur", "Anshuman", "9803875428", "2000"));
        registerBooking(new BookingModel("2024-09-18", "759762", "Koteshwor", "Munal", "9878365732", "2300"));
        loadListToTable(BookingList);

    }

    /**
     * Simulates the loading progress using a SwingWorker thread. Updates a
     * progress bar incrementally and switches to the login screen upon
     * completion.
     */
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay for progress bar
                    publish(i); // Publish progress
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                pgbarloading.setValue(progress);
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute(); // Start the worker thread
    }

    // Method to add booking data and populate the table
    private void registerBooking(BookingModel booking) {
        BookingList.add(booking);
        DefaultTableModel model = (DefaultTableModel) tblbooking.getModel();
        model.addRow(new Object[]{
            booking.getBookingDate(),
            booking.getBookingId(),
            booking.getLocation(),
            booking.getFullName(),
            booking.getcontact(),
            booking.getTotalCost()
        });
    }

    /**
     * Switches the application screen to the specified screen name.
     *
     * @param screenName The name of the screen to display.
     */
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }

    /**
     * Handles the logout button action. Clears the login fields and switches
     * back to the login screen.
     *
     * @param evt The action event triggered by the logout button.
     */
    /**
     * Handles the logout button action. Clears the login fields and switches
     * back to the login screen.
     *
     * @param evt The action event triggered by the logout button.
     */
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        txtfldusername.setText("");
        fwfldpassword.setText("");
        loadScreen("LoginScreen"); // Load the main screen
    }//GEN-LAST:event_btnLogoutActionPerformed


  private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
      // Get the username and password input

      String username = txtfldusername.getText();
      String password = new String(fwfldpassword.getPassword());

      // Check if username or password is empty
      if (username.isEmpty() || password.isEmpty()) {
          lblLoginError.setText("Please enter your username and password.");
      } // Check if username and password are incorrect
      else if (!username.equals("Bandit") || !password.equals("Bandit")) {
          lblLoginError.setText("Username and password is incorrect");
      } // If credentials are correct, proceed to load the main screen
      else {
          lblLoginError.setText(""); // Clear any previous error messages
          loadScreen("MainScreen"); // Load the main screen
      }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddActionPerformed
        // TODO add your handling code here:
        // 1. Initialize a flag to track overall validation success
        boolean isValid = true;

        // 2. Validate Booking Date
        isValid &= validateField(
                txtfldbookingdate,
                "Booking Date",
                lblErrorMsgBookingDate,
                "Must be in correct format yyyy-MM-dd.",
                errorColor,
                yellowColor,
                Validationutil.isValidBookingDate(txtfldbookingdate.getText())
        );

        // 3. Validate Booking ID
        isValid &= validateField(
                txtfldbookingid,
                "Booking ID",
                lblErrorMsgBookingId,
                "Must have 6 digits.",
                errorColor,
                yellowColor,
                Validationutil.isValidBookingId(txtfldbookingid.getText())
        );

        // 4. Validate Location
        isValid &= validateField(
                txtfldlocation,
                "Location",
                lblErrorMsgLocation,
                "Must contain only alphabets.",
                errorColor,
                yellowColor,
                Validationutil.isValidLocation(txtfldlocation.getText())
        );

        // 5. Validate Full Name
        isValid &= validateField(
                txtfldfullname,
                "Full Name",
                lblErrorMsgFullName,
                "Must contain only alphabets.",
                errorColor,
                yellowColor,
                Validationutil.isValidName(txtfldfullname.getText())
        );

        // 6. Validate Contact
        isValid &= validateField(
                txtfldcontact,
                "Contact",
                lblErrorMsgContact,
                "Must start with 98 and have 10 digits.",
                errorColor,
                yellowColor,
                Validationutil.isValidContact(txtfldcontact.getText())
        );

        // 7. Validate Total Cost
        isValid &= validateField(
                txtfldtotalcost,
                "Total Cost",
                lblErrorMsgTotalCost,
                "Must be a numeric value.",
                errorColor,
                yellowColor,
                Validationutil.isValidTotalCost(txtfldtotalcost.getText())
        );

        // 8. Proceed if all fields are valid
        if (isValid) {
            // 9. Create a new BookingModel instance
            BookingModel newBooking = new BookingModel(
                    txtfldbookingdate.getText().trim(), // Booking Date
                    txtfldbookingid.getText().trim(), // Booking ID
                    txtfldlocation.getText().trim(), // Location
                    txtfldfullname.getText().trim(), // Full Name
                    txtfldcontact.getText().trim(), // Contact
                    txtfldtotalcost.getText().trim() // Total Cost
            );

            // 10. Check for duplicate Booking ID
            if (checkDuplicateBooking(newBooking)) {
                // Highlight the Booking ID field as invalid
                txtfldbookingid.setBorder(createTitledBorder(errorColor, "Booking ID"));
                // Show a warning message
                showDialogBox("Booking with this ID already exists.", "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
            } else {
                // 11. Add the booking to the list
                BookingList.add(newBooking);

                // 12. Clear the input fields
                clearBookingForm();

                // 13. Refresh the table
                loadListToTable(BookingList);

                // 14. Highlight the Booking ID field as valid
                txtfldbookingid.setBorder(createTitledBorder(yellowColor, "Booking ID"));

                // 15. Show a success message
                showDialogBox("Booking successfully added!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnaddActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        // TODO add your handling code here:
        // 1. Get the selected row from the table
        int selectedRow = tblbooking.getSelectedRow();

        // 2. Check if a row is selected
        if (selectedRow == -1) {
            // If no row is selected, show an error message
            JOptionPane.showMessageDialog(
                    this,
                    "Please select a booking to delete.",
                    "No Selection",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        // 3. Confirm deletion from the user
        int confirmation = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete the selected booking?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION
        );

        // 4. Proceed only if the user confirms
        if (confirmation == JOptionPane.YES_OPTION) {
            // 5. Retrieve the Booking ID from the selected row
            String bookingIdToDelete = tblbooking.getValueAt(selectedRow, 1).toString();

            // 6. Remove the booking from the BookingList
            BookingList.removeIf(booking -> booking.getBookingId().equals(bookingIdToDelete));

            // 7. Update the table to reflect the changes
            loadListToTable(BookingList);

            // 8. Display a success message
            JOptionPane.showMessageDialog(
                    this,
                    "Booking deleted successfully.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE
            );
        }
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
        // TODO add your handling code here:// 1. Get the selected row from the table
        int selectedRow = tblbooking.getSelectedRow();

        // 2. Check if a row is selected
        if (selectedRow == -1) {
            // If no row is selected, show an error message
            JOptionPane.showMessageDialog(
                    this,
                    "Please select a booking to update.",
                    "No Selection",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        // 3. Validate all input fields
        boolean isValid = true;

        // 4. Validate Booking Date
        isValid &= validateField(
                txtfldbookingdate,
                "Booking Date",
                lblErrorMsgBookingDate,
                "Must be in correct format yyyy-MM-dd.",
                errorColor,
                yellowColor,
                Validationutil.isValidBookingDate(txtfldbookingdate.getText())
        );

        // 5. Validate Booking ID
        isValid &= validateField(
                txtfldbookingid,
                "Booking ID",
                lblErrorMsgBookingId,
                "Must have 6 digits.",
                errorColor,
                yellowColor,
                Validationutil.isValidBookingId(txtfldbookingid.getText())
        );

        // 6. Validate Location
        isValid &= validateField(
                txtfldlocation,
                "Location",
                lblErrorMsgLocation,
                "Must contain only alphabets.",
                errorColor,
                yellowColor,
                Validationutil.isValidLocation(txtfldlocation.getText())
        );

        // 7. Validate Full Name
        isValid &= validateField(
                txtfldfullname,
                "Full Name",
                lblErrorMsgFullName,
                "Must contain only alphabets.",
                errorColor,
                yellowColor,
                Validationutil.isValidName(txtfldfullname.getText())
        );

        // 8. Validate Contact
        isValid &= validateField(
                txtfldcontact,
                "Contact",
                lblErrorMsgContact,
                "Must start with 98 and have 10 digits.",
                errorColor,
                yellowColor,
                Validationutil.isValidContact(txtfldcontact.getText())
        );

        // 9. Validate Total Cost
        isValid &= validateField(
                txtfldtotalcost,
                "Total Cost",
                lblErrorMsgTotalCost,
                "Must be a numeric value with up to two decimal places.",
                errorColor,
                yellowColor,
                Validationutil.isValidTotalCost(txtfldtotalcost.getText())
        );

        // 10. Proceed if all fields are valid
        if (isValid) {
            // 11. Retrieve the Booking ID of the selected row
            String oldBookingId = tblbooking.getValueAt(selectedRow, 1).toString();

            // 12. Find the booking in the list and update it
            for (BookingModel booking : BookingList) {
                if (booking.getBookingId().equals(oldBookingId)) {
                    booking.setBookingDate(txtfldbookingdate.getText().trim());
                    booking.setBookingId(txtfldbookingid.getText().trim());
                    booking.setLocation(txtfldlocation.getText().trim());
                    booking.setFullName(txtfldfullname.getText().trim());
                    booking.setcontact(txtfldcontact.getText().trim());
                    booking.setTotalCost(txtfldtotalcost.getText().trim());
                    break;
                }
            }

            // 13. Refresh the table to reflect the updates
            loadListToTable(BookingList);

            // 14. Clear the input fields
            clearBookingForm();

            // 15. Show a success message
            JOptionPane.showMessageDialog(
                    this,
                    "Booking updated successfully.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE
            );
        }
    }//GEN-LAST:event_btnupdateActionPerformed

    private void btnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearActionPerformed
        // TODO add your handling code here:
        txtfldbookingdate.setText("");
        txtfldbookingid.setText("");
        txtfldfullname.setText("");
        txtfldcontact.setText("");
        txtfldlocation.setText("");
        txtfldtotalcost.setText("");
    }//GEN-LAST:event_btnclearActionPerformed

    private void btnselectionsortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnselectionsortActionPerformed
        try {
            // 1. Create an instance of SelectionSort
            SelectionSort selectionSort = new SelectionSort();

            // 2. Retrieve the current data from the JTable
            List<BookingModel> currentBookings = new ArrayList<>();
            DefaultTableModel model = (DefaultTableModel) tblbooking.getModel();

            for (int i = 0; i < model.getRowCount(); i++) {
                // Retrieve each column value, handling nulls
                String bookingDate = model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : "";
                String bookingId = model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString() : "";
                String location = model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString() : "";
                String fullName = model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString() : "";
                String contact = model.getValueAt(i, 4) != null ? model.getValueAt(i, 4).toString() : "";
                String totalCost = model.getValueAt(i, 5) != null ? model.getValueAt(i, 5).toString() : "";

                // Create a BookingModel object and add it to the list
                BookingModel booking = new BookingModel(bookingDate, bookingId, location, fullName, contact, totalCost);
                currentBookings.add(booking);
            }

            // 3. Ask the user for sorting order
            String[] options = {"Ascending", "Descending"};
            int choice = JOptionPane.showOptionDialog(
                    this,
                    "Choose sorting order:",
                    "Sort Order",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            if (choice == -1) {
                // User closed the dialog without choosing
                return;
            }

            boolean isDescending = (choice == 1); // If "Descending" is chosen

            // 4. Use SelectionSort to sort the list
            List<BookingModel> sortedBookings = selectionSort.sortByBookingId(currentBookings, isDescending);

            // 5. Update the JTable with sorted data
            model.setRowCount(0); // Clear the table
            for (BookingModel booking : sortedBookings) {
                model.addRow(new Object[]{
                    booking.getBookingDate(),
                    booking.getBookingId(),
                    booking.getLocation(),
                    booking.getFullName(),
                    booking.getcontact(),
                    booking.getTotalCost()
                });
            }

            // 6. Show success message
            JOptionPane.showMessageDialog(
                    this,
                    "Table sorted successfully in " + (isDescending ? "descending" : "ascending") + " order!",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE
            );
        } catch (Exception e) {
            // Handle any errors gracefully
            JOptionPane.showMessageDialog(
                    this,
                    "An error occurred while sorting: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnselectionsortActionPerformed

    private void btnmergesortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmergesortActionPerformed
        try {
            // 1. Create an instance of MergeSort
            MergeSort mergeSort = new MergeSort();

            // 2. Retrieve the current data from the JTable
            List<BookingModel> currentBookings = new ArrayList<>();
            DefaultTableModel model = (DefaultTableModel) tblbooking.getModel();

            for (int i = 0; i < model.getRowCount(); i++) {
                // Retrieve each column value, handling nulls
                String bookingDate = model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : "";
                String bookingId = model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString() : "";
                String location = model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString() : "";
                String fullName = model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString() : "";
                String contact = model.getValueAt(i, 4) != null ? model.getValueAt(i, 4).toString() : "";
                String totalCost = model.getValueAt(i, 5) != null ? model.getValueAt(i, 5).toString() : "";

                // Create a BookingModel object and add it to the list
                BookingModel booking = new BookingModel(bookingDate, bookingId, location, fullName, contact, totalCost);
                currentBookings.add(booking);
            }

            // 3. Ask the user for sorting order
            String[] options = {"Ascending", "Descending"};
            int choice = JOptionPane.showOptionDialog(
                    this,
                    "Choose sorting order:",
                    "Sort Order",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            if (choice == -1) {
                // User closed the dialog without choosing
                return;
            }

            boolean isDescending = (choice == 1); // If "Descending" is chosen

            // 4. Use MergeSort to sort the list by name
            List<BookingModel> sortedBookings = mergeSort.sortByName(currentBookings, isDescending);

            // 5. Update the JTable with sorted data
            model.setRowCount(0); // Clear the table
            for (BookingModel booking : sortedBookings) {
                model.addRow(new Object[]{
                    booking.getBookingDate(),
                    booking.getBookingId(),
                    booking.getLocation(),
                    booking.getFullName(),
                    booking.getcontact(),
                    booking.getTotalCost()
                });
            }

            // 6. Show success message
            JOptionPane.showMessageDialog(
                    this,
                    "Table sorted successfully by name in " + (isDescending ? "descending" : "ascending") + " order!",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE
            );
        } catch (Exception e) {
            // Handle any errors gracefully
            JOptionPane.showMessageDialog(
                    this,
                    "An error occurred while sorting: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnmergesortActionPerformed

    private void InsertionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertionSortActionPerformed
        // TODO add your handling code here:
        try {
            // 1. Create an instance of InsertionSort
            InsertionSort insertionSort = new InsertionSort();

            // 2. Retrieve the current data from the JTable
            List<BookingModel> currentBookings = new ArrayList<>();
            DefaultTableModel model = (DefaultTableModel) tblbooking.getModel();

            for (int i = 0; i < model.getRowCount(); i++) {
                // Retrieve each column value, handling nulls
                String bookingDate = model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : "";
                String bookingId = model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString() : "";
                String location = model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString() : "";
                String fullName = model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString() : "";
                String contact = model.getValueAt(i, 4) != null ? model.getValueAt(i, 4).toString() : "";
                String totalCost = model.getValueAt(i, 5) != null ? model.getValueAt(i, 5).toString() : "";

                // Create a BookingModel object and add it to the list
                BookingModel booking = new BookingModel(bookingDate, bookingId, location, fullName, contact, totalCost);
                currentBookings.add(booking);
            }

            // 3. Ask the user for sorting order
            String[] options = {"Ascending", "Descending"};
            int choice = JOptionPane.showOptionDialog(
                    this,
                    "Choose sorting order:",
                    "Sort Order",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            if (choice == -1) {
                // User closed the dialog without choosing
                return;
            }

            boolean isDescending = (choice == 1); // If "Descending" is chosen

            // 4. Use InsertionSort to sort the list by location
            insertionSort.sortByLocation(currentBookings, isDescending);

            // 5. Update the JTable with sorted data
            model.setRowCount(0); // Clear the table
            for (BookingModel booking : currentBookings) {
                model.addRow(new Object[]{
                    booking.getBookingDate(),
                    booking.getBookingId(),
                    booking.getLocation(),
                    booking.getFullName(),
                    booking.getcontact(),
                    booking.getTotalCost()
                });
            }

            // 6. Show success message
            JOptionPane.showMessageDialog(
                    this,
                    "Table sorted successfully by location in " + (isDescending ? "descending" : "ascending") + " order!",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE
            );
        } catch (Exception e) {
            // Handle any errors gracefully
            JOptionPane.showMessageDialog(
                    this,
                    "An error occurred while sorting: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
            e.printStackTrace();
        }

    }//GEN-LAST:event_InsertionSortActionPerformed

    private void binarysearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binarysearchActionPerformed
        try {
            // 1. Create an instance of BinarySearch
            BinarySearch binarySearch = new BinarySearch();

            // 2. Retrieve the current data from the JTable and sort it
            List<BookingModel> currentBookings = new ArrayList<>();
            DefaultTableModel model = (DefaultTableModel) tblbooking.getModel();

            for (int i = 0; i < model.getRowCount(); i++) {
                String bookingDate = model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : "";
                String bookingId = model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString() : "";
                String location = model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString() : "";
                String fullName = model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString() : "";
                String contact = model.getValueAt(i, 4) != null ? model.getValueAt(i, 4).toString() : "";
                String totalCost = model.getValueAt(i, 5) != null ? model.getValueAt(i, 5).toString() : "";

                BookingModel booking = new BookingModel(bookingDate, bookingId, location, fullName, contact, totalCost);
                currentBookings.add(booking);
            }

            // 3. Get the search key from the text field
            String searchKey = binarysearch.getText().trim(); // txtSearchField is your JTextField for input

            if (searchKey.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a value to search!", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // 4. Determine whether to search by BookingId or FullName
            boolean isNumeric = searchKey.matches("\\d+"); // Check if input is numeric
            int index = -1;

            if (isNumeric) {
                // Search by BookingId
                int searchInt = Integer.parseInt(searchKey);
                index = binarySearch.searchByBookingId(currentBookings, 0, currentBookings.size() - 1, searchInt);
            } else {
                // Search by FullName
                index = binarySearch.searchByFullName(currentBookings, 0, currentBookings.size() - 1, searchKey);
            }

            // 5. Display the result
            if (index != -1) {
                BookingModel found = currentBookings.get(index);
                JOptionPane.showMessageDialog(
                        this,
                        "Booking found:\n"
                        + "Date: " + found.getBookingDate() + "\n"
                        + "ID: " + found.getBookingId() + "\n"
                        + "Location: " + found.getLocation() + "\n"
                        + "Full Name: " + found.getFullName() + "\n"
                        + "Contact: " + found.getcontact() + "\n"
                        + "Total Cost: " + found.getTotalCost(),
                        "Search Result",
                        JOptionPane.INFORMATION_MESSAGE
                );
            } else {
                JOptionPane.showMessageDialog(this, "No booking found!", "Search Result", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_binarysearchActionPerformed

    /**
     * Populates the JTable with the current list of Booking records. Clears
     * existing rows in the table model before adding new data.
     */
    private void loadListToTable(List<BookingModel> bookingList) {
        // Get the table model
        DefaultTableModel model = (DefaultTableModel) tblbooking.getModel();

        // Clear the table
        model.setRowCount(0);

        // Add rows to the table
        for (BookingModel booking : bookingList) {
            model.addRow(new Object[]{
                booking.getBookingDate(),
                booking.getBookingId(),
                booking.getLocation(),
                booking.getFullName(),
                booking.getcontact(),
                booking.getTotalCost()
            });
        }
    }

    /**
     * Validates a single input field based on specific criteria and updates its
     * visual state.
     *
     * @param textField the JTextField to validate
     * @param fieldName the name of the field for error display
     * @param errorLbl the JLabel to show error messages
     * @param errorMsg the error message to display for invalid input
     * @param errorColor the color for error borders and text
     * @param successColor the color for successful validation borders
     * @param isValidFormat whether the input satisfies the field-specific
     * validation criteria
     * @return true if the field passes validation, false otherwise
     */
    private boolean validateField(JTextField textField, String fieldName, JLabel errorLbl, String errorMsg, Color errorColor, Color successColor, boolean isValidFormat) {
        if (Validationutil.isNullOrEmpty(textField.getText())) {
            textField.setBorder(createTitledBorder(errorColor, fieldName));
            errorLbl.setText("Field cannot be empty!");
            errorLbl.setVisible(true);
            return false;
        } else if (!isValidFormat) {
            textField.setBorder(createTitledBorder(errorColor, fieldName));
            errorLbl.setText(errorMsg);
            errorLbl.setVisible(true);
            return false;
        } else {
            textField.setBorder(createTitledBorder(successColor, fieldName));
            errorLbl.setVisible(false);
            return true;
        }
    }

    /**
     * Creates a custom TitledBorder with specified color and title.
     *
     * @param color the color for the border and title
     * @param title the title text for the border
     * @return a TitledBorder instance
     */
    private javax.swing.border.TitledBorder createTitledBorder(Color color, String title) {
        return javax.swing.BorderFactory.createTitledBorder(
                javax.swing.BorderFactory.createLineBorder(color, 2),
                title,
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION,
                new java.awt.Font("Arial", 2, 12),
                color
        );
    }

    /**
     * Displays a message dialog box with the given message, title, and type.
     *
     * @param message the message to display
     * @param title the title of the dialog box
     * @param messageType the type of message (e.g., information, warning, or
     * error)
     */
    private void showDialogBox(String message, String title, int messageType) {
        JOptionPane.showMessageDialog(this, message, title, messageType);
    }

    /**
     * Clears all input fields in the Booking form. Resets each field's value to
     * an empty string.
     */
    private void clearBookingForm() {
        txtfldbookingdate.setText("");
        txtfldbookingid.setText("");
        txtfldfullname.setText("");
        txtfldcontact.setText("");
        txtfldlocation.setText("");
        txtfldtotalcost.setText("");
    }

    /**
     * Checks whether a booking with the same Booking ID already exists in the
     * Booking list.
     *
     * @param Booking the BookingModel object to check for duplicates
     * @return true if a duplicate is found, false otherwise
     */
    private boolean checkDuplicateBooking(BookingModel Booking) {
        return BookingList.stream()
                .anyMatch(existingBooking
                        -> existingBooking.getBookingId() == Booking.getBookingId());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FutsalManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FutsalManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FutsalManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FutsalManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        FutsalManagement app = new FutsalManagement();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FutsalManagement().setVisible(true);
            }
        });
        app.startProgress();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton InsertionSort;
    private javax.swing.JTextField binarysearch;
    private javax.swing.JButton btnadd;
    private javax.swing.JButton btnclear;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnhometobooking;
    private javax.swing.JButton btnlogin;
    private javax.swing.JButton btnlogout;
    private javax.swing.JButton btnmergesort;
    private javax.swing.JButton btnselectionsort;
    private javax.swing.JButton btnupdate;
    private javax.swing.JPasswordField fwfldpassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblErrorMsgBookingDate;
    private javax.swing.JLabel lblErrorMsgBookingId;
    private javax.swing.JLabel lblErrorMsgContact;
    private javax.swing.JLabel lblErrorMsgFullName;
    private javax.swing.JLabel lblErrorMsgLocation;
    private javax.swing.JLabel lblErrorMsgTotalCost;
    private javax.swing.JLabel lblLoginError;
    private javax.swing.JLabel lblaboutus1;
    private javax.swing.JLabel lblaboutus3;
    private javax.swing.JLabel lblaboutus4;
    private javax.swing.JLabel lblaboutus5;
    private javax.swing.JLabel lblaboutuslogo;
    private javax.swing.JLabel lblgallery1;
    private javax.swing.JLabel lblgallery2;
    private javax.swing.JLabel lblgallery3;
    private javax.swing.JLabel lblgallery4;
    private javax.swing.JLabel lblgallery5;
    private javax.swing.JLabel lblgallerybandit;
    private javax.swing.JLabel lblgalleryimadol;
    private javax.swing.JLabel lblgallerylogo;
    private javax.swing.JLabel lblgalleryyalla;
    private javax.swing.JLabel lblhome1;
    private javax.swing.JLabel lblhome2;
    private javax.swing.JLabel lblhome3;
    private javax.swing.JLabel lblhome4;
    private javax.swing.JLabel lblhomelogo;
    private javax.swing.JLabel lblloading1;
    private javax.swing.JLabel lblloadinglogo;
    private javax.swing.JLabel lblloadingname;
    private javax.swing.JLabel lbllogin1;
    private javax.swing.JLabel lblloginlogo;
    private javax.swing.JLabel lblloginslogan;
    private javax.swing.JLabel lblmainlogo;
    private javax.swing.JLabel lblmainslogan;
    private javax.swing.JLabel lblmainslogan1;
    private javax.swing.JLabel lblmainslogan2;
    private javax.swing.JLabel lblmainslogan3;
    private javax.swing.JLabel lblmaintitle;
    private javax.swing.JLabel lblsignin;
    private javax.swing.JLabel lblsuii;
    private javax.swing.JTabbedPane maintabbedpane;
    private javax.swing.JProgressBar pgbarloading;
    private javax.swing.JPanel pnlloading;
    private javax.swing.JPanel pnllogin;
    private javax.swing.JPanel pnlmain1;
    private javax.swing.JPanel pnlmainaboutus;
    private javax.swing.JPanel pnlmainbooking;
    private javax.swing.JPanel pnlmaingallery;
    private javax.swing.JPanel pnlmainhome;
    private javax.swing.JPanel pnlmainupper;
    private javax.swing.JTable tblbooking;
    private javax.swing.JTextField txtfldbookingdate;
    private javax.swing.JTextField txtfldbookingid;
    private javax.swing.JTextField txtfldcontact;
    private javax.swing.JTextField txtfldfullname;
    private javax.swing.JTextField txtfldlocation;
    private javax.swing.JTextField txtfldtotalcost;
    private javax.swing.JTextField txtfldusername;
    // End of variables declaration//GEN-END:variables
}
